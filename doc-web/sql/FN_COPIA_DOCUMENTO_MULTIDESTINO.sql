create or replace FUNCTION "FN_COPIA_DOC_MULTIDESTINO"
(
  P_DOC_ID_ORIGEN   IN DOCUMENTO.DOC_ID%TYPE,
  P_PIN_ID_NUEVO    IN DOCUMENTO.PIN_ID%TYPE
)
RETURN VARCHAR2 is
    V_PIN_ID_ANTERIOR   DOCUMENTO.PIN_ID%TYPE;
    V_CANTIDAD          NUMBER;
    V_PIV_ID_NUEVO      PROCESO_INSTANCIA_VAR.PIV_ID%TYPE;

    CURSOR C_PIVAR  IS
    SELECT PIV_ID, PIN_ID, PIV_KEY, PIV_VALUE, CUANDO, QUIEN, ACTIVO, CUANDO_MOD, QUIEN_MOD, COUNT(1) CANTIDAD
    FROM H_PROCESO_INSTANCIA_VAR 
    WHERE PIN_ID = V_PIN_ID_ANTERIOR 
    GROUP BY PIV_ID, PIN_ID, PIV_KEY, PIV_VALUE, CUANDO, QUIEN, ACTIVO, CUANDO_MOD, QUIEN_MOD
    ORDER BY PIV_ID ASC;
BEGIN

    BEGIN
        SELECT PIN_ID INTO V_PIN_ID_ANTERIOR FROM DOCUMENTO WHERE DOC_ID = P_DOC_ID_ORIGEN;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        RETURN 'No se encontro el documento origen';
    END;

    IF P_PIN_ID_NUEVO IS NULL THEN
        RETURN 'El identificador de la tabla PROCESO_INSTANCIA esta vacío.';
    END IF;
    
    SELECT COUNT(1) INTO V_CANTIDAD FROM PROCESO_INSTANCIA WHERE PIN_ID = P_PIN_ID_NUEVO;
    
    IF V_CANTIDAD > 0 THEN
        RETURN 'El identificador nuevo de la tabla PROCESO_INSTANCIA ya se encuentró en el sistema.';
    END IF;
        
    INSERT INTO PROCESO_INSTANCIA (SELECT P_PIN_ID_NUEVO,PRO_ID,CUANDO,QUIEN,PES_ID,CUANDO_MOD,QUIEN_MOD,USU_ID_ASIGNADO FROM PROCESO_INSTANCIA WHERE PIN_ID = V_PIN_ID_ANTERIOR);
    
    --DELETE FROM PROCESO_INSTANCIA_VAR WHERE PIN_ID = P_PIN_ID_NUEVO;
    
    --INSERT INTO PROCESO_INSTANCIA_VAR (SELECT PROCESO_INSTANCIA_VAR_SEQ.NEXTVAL, P_PIN_ID_NUEVO, PIV_KEY, DECODE(PIV_KEY,'doc.id',P_PIN_ID_NUEVO,PIV_VALUE), CUANDO, QUIEN, ACTIVO, CUANDO_MOD, QUIEN_MOD FROM PROCESO_INSTANCIA_VAR WHERE PIN_ID = V_PIN_ID_ANTERIOR);
    
    UPDATE PROCESO_INSTANCIA SET PES_ID = (SELECT PES_ID FROM PROCESO_INSTANCIA WHERE PIN_ID = V_PIN_ID_ANTERIOR) WHERE PIN_ID = P_PIN_ID_NUEVO;
    
    DELETE FROM H_PROCESO_INSTANCIA WHERE PIN_ID = P_PIN_ID_NUEVO;
    
    INSERT INTO H_PROCESO_INSTANCIA (PIN_ID, PRO_ID, CUANDO, QUIEN, PES_ID, CUANDO_MOD, QUIEN_MOD, USU_ID_ASIGNADO)
    (SELECT P_PIN_ID_NUEVO, PRO_ID, CUANDO, QUIEN, PES_ID, CUANDO_MOD, QUIEN_MOD, USU_ID_ASIGNADO FROM H_PROCESO_INSTANCIA a WHERE a.PIN_ID= V_PIN_ID_ANTERIOR);
    
    DELETE FROM PROCESO_INSTANCIA_VAR WHERE PIN_ID = P_PIN_ID_NUEVO;
    DELETE FROM H_PROCESO_INSTANCIA_VAR WHERE PIN_ID = P_PIN_ID_NUEVO;
    
    FOR AUX_C_PIVAR IN C_PIVAR LOOP
        INSERT INTO PROCESO_INSTANCIA_VAR (PIN_ID, PIV_KEY, PIV_VALUE, CUANDO, QUIEN, ACTIVO, CUANDO_MOD, QUIEN_MOD) VALUES
        (P_PIN_ID_NUEVO, AUX_C_PIVAR.PIV_KEY, DECODE(AUX_C_PIVAR.PIV_KEY, 'doc.id',P_PIN_ID_NUEVO,AUX_C_PIVAR.PIV_VALUE), AUX_C_PIVAR.CUANDO, AUX_C_PIVAR.QUIEN, AUX_C_PIVAR.ACTIVO, AUX_C_PIVAR.CUANDO_MOD, AUX_C_PIVAR.QUIEN_MOD) RETURNING PIV_ID INTO V_PIV_ID_NUEVO ;
        
        IF AUX_C_PIVAR.CANTIDAD > 1 THEN
            INSERT INTO H_PROCESO_INSTANCIA_VAR (PIV_ID, PIN_ID, PIV_KEY, PIV_VALUE, CUANDO, QUIEN, ACTIVO, CUANDO_MOD, QUIEN_MOD) VALUES
            (V_PIV_ID_NUEVO, P_PIN_ID_NUEVO, AUX_C_PIVAR.PIV_KEY, DECODE(AUX_C_PIVAR.PIV_KEY, 'doc.id',P_PIN_ID_NUEVO,AUX_C_PIVAR.PIV_VALUE), AUX_C_PIVAR.CUANDO, AUX_C_PIVAR.QUIEN, AUX_C_PIVAR.ACTIVO, AUX_C_PIVAR.CUANDO_MOD, AUX_C_PIVAR.QUIEN_MOD);    
        END IF;
        
    END LOOP;
    
    
    --No se tuvieron en cuenta
        --INSTANCIA_BANDEJA
        --S_INSTANCIA_USUARIO
    RETURN 'OK';
END "FN_COPIA_DOC_MULTIDESTINO";